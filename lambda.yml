AWSTemplateFormatVersion: 2010-09-09
Resources:
  PolicyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: group1
  
  CreateRecordsetPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Groups:
          - !Ref PolicyGroup
      PolicyDocument: 
        {
          Version: "2012-10-17",
          Statement: [
            {
              Effect: "Allow",
              Action: "route53:ChangeResourceRecordSets",
              Resource: "*"
            }
          ]
        }
      PolicyName: spn-create-recordset-policy #required
      Roles:
        - !Ref CreateRecordsetRole
  BasicLambda:
    Type: "AWS::IAM::Policy"
    Properties:
      Groups:
        - !Ref PolicyGroup
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      } #required
      PolicyName: spn-basic-lambda-policy #required
      Roles:
        - !Ref CreateRecordsetRole
  
  CreateRecordsetRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com"
            }
          }
        ]
      } #required
      RoleName: spn-lambda-role

  LambdaFunc:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: #required
        ZipFile: |
          import json
          import urllib.request
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
            ## Todo: differentiate between event type to propertly such as create, update, and delete
            ## Todo: logging does not work
            ## Sample test event
            # {
            #   "RequestType": "CREATE",
            #   "ResponseURL": "https://webhook.site/95fd7150-fb5d-4c66-b141-1c539aea5270",
            #   "ResourceProperties": {},
            #   "StackId": "1232",
            #   "RequestId": "3333",
            #   "LogicalResourceId": "llll"
            # }
              logger.info('souphorn got event{}'.format(event))
              status = 'SUCCESS'
              physicalResourceId="abc123"
              data = json.dumps({
                  'Status': status, 
                  'PhysicalResourceId': physicalResourceId,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId']
              })
              request = urllib.request.Request(url=event['ResponseURL'], method='PUT', data=data.encode())
              response = urllib.request.urlopen(request)
              
              result = {
                  'statusCode': response.status,
                  'body': response.read().decode('utf-8'),
              }
              
              print(result)
              return result
      FunctionName: hello-world
      Role: !GetAtt CreateRecordsetRole.Arn #required
      Runtime: python3.7 #required
      Handler: index.handler
      Timeout: 10
  LogicalID:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: #required
        Code
      DeadLetterConfig:
        DeadLetterConfig
      Description: String
      Environment:
        Environment
      FunctionName: String
      Handler: String #required
      KmsKeyArn: String
      Layers:
        - String
      MemorySize: Integer
      ReservedConcurrentExecutions: Integer
      Role: String #required
      Runtime: String #required
      Tags:
        - Tag
      Timeout: Integer
      TracingConfig:
        TracingConfig
      VpcConfig:
        VpcConfig
  
  CustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt LambdaFunc.Arn #required
  
  